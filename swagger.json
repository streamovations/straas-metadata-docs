{
  "openapi": "3.0.0",
  "info": {
    "description": "Streamovations Metadata API",
    "version": "0.1.0",
    "title": "Streamovations Metadata API",
    "termsOfService": "",
    "contact": {
      "name": "support",
      "url": "https://streamovations.be",
      "email": "operations@streamovations.be"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://opensource.org/licenses/GPL-3.0"
    }
  },
  "paths": {
    "/{customer}/metadata/delegates": {
      "get": {
        "tags": [
          "Delegates"
        ],
        "summary": "Get delegates",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Filter for active or inactive delegates",
            "x-example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Paginate filter starting from given delegate id in combination with limit",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405d"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "description": "Paginate filter for given limit started from last given delegate id",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending based on given sortField",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Sort ascending or descending based on given sortField",
            "enum": [
              "createdAt",
              "updatedAt"
            ],
            "x-example": "createdAt",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "example": "createdAt"
            }
          },
          {
            "name": "firstname",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "Michel",
            "schema": {
              "type": "string",
              "example": "John"
            }
          },
          {
            "name": "lastname",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "Drets",
            "schema": {
              "type": "string",
              "example": "Doe"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400"
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getDelegates",
        "description": "List Delegates"
      },
      "post": {
        "tags": [
          "Delegates"
        ],
        "summary": "Create a delegate",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delegates"
            },
            "x-examples": {
              "example-1": {
                "firstname": "d7lxre",
                "lastname": "i7wb95",
                "email": "support@streamovations.be",
                "refId": "JV01",
                "active": true,
                "division": "507f1f77bcf86cd799439011",
                "role": "507f1f77bcf86cd79947896"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateResponse"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "_id": "5d5aad6c39d02e4c4bc3fb45",
                      "firstname": "John",
                      "lastname": "Doe",
                      "description": null,
                      "photo": {
                        "_id": "5d5aad6c39d02e4c4bc3fb45",
                        "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                        "size": 2751,
                        "mimeType": "image/png",
                        "encoding": "7bit"
                      },
                      "division": {
                        "_id": "5d5aad6c39d02e4c4bc3fb45",
                        "photo": {
                          "_id": "5d5aad6c39d02e4c4bc3fb45",
                          "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                          "size": 2751,
                          "mimeType": "image/png",
                          "encoding": "7bit"
                        },
                        "name": "NV-A"
                      },
                      "role": {
                        "priority": 1,
                        "name": "Burgemeester",
                        "_id": "5d5aad6c39d02e4c4bc3fb45"
                      },
                      "email": "user@example.com"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "createDelegate",
        "description": "Create a Delegate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateCreateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "firstname": "string",
                    "lastname": "string",
                    "email": "user@example.com",
                    "role": null
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "customer",
          "in": "path",
          "required": true,
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Delegates"
      }
    },
    "/{customer}/metadata/delegates/export": {
      "get": {
        "tags": [
          "Delegates"
        ],
        "summary": "Export delegates",
        "description": "Exports delegates for download as metadata-delegates.json",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200"
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "exportDelegates"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Delegates"
      }
    },
    "/{customer}/metadata/delegates/{id}": {
      "get": {
        "tags": [
          "Delegates"
        ],
        "summary": "Get a delegate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getDelegate",
        "description": "Get a Delegate by ID"
      },
      "put": {
        "tags": [
          "Delegates"
        ],
        "summary": "Update a delegate",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/delegatesOptional"
            },
            "x-examples": {
              "example-1": "\n{\n   \"firstname\" : \"d7lxre\",\n   \"lastname\" : \"i7wb95\"\n   \"email\": \"support@streamovations.be\"\n   \"refId\": \"JV01\",\n   \"active\" : true,\n   \"division\": \"CD&V\",\n   \"role\": \"burgemeester\"\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "updateDelegate",
        "description": "Update a Delegate by ID"
      },
      "delete": {
        "tags": [
          "Delegates"
        ],
        "summary": "Delete a delegate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteDelegate",
        "description": "Delete a Delegate by ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "ObjectId for delegate",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Delegates"
      }
    },
    "/{customer}/metadata/divisions": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Get divisions",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "last",
            "description": "Paginate filter starting from given delegate id in combination with limit"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 100,
              "example": 100
            },
            "in": "query",
            "name": "limit",
            "description": "Paginate filter for given limit started from last given delegate id"
          },
          {
            "schema": {
              "type": "string",
              "default": "desc",
              "example": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sortOrder",
            "description": "Sort ascending or descending based on given sortField"
          },
          {
            "schema": {
              "type": "string",
              "example": "createdAt",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt",
                "name"
              ]
            },
            "in": "query",
            "name": "sortField",
            "description": "Sort ascending or descending based on given sortField"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DivisionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "getDivisions",
        "description": "List Divisions"
      },
      "post": {
        "tags": [
          "Divisions"
        ],
        "summary": "Create a division",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "": {
                  "$ref": "#/definitions/delegates"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5d5aad5e39d02e4c4bc3fb40",
                      "photo": {
                        "_id": "5f44bbe68365ec18ae854003"
                      },
                      "name": "VLD",
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "createDivision",
        "description": "Create a Division",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DivisionCreateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "name": "VLD",
                    "description": "string"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "example": "veurne",
            "type": "string"
          }
        }
      ],
      "x-restlet": {
        "section": "Divisions"
      }
    },
    "/{customer}/metadata/divisions/{id}": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Get a division",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "getDivision",
        "description": "Get a Division by ID"
      },
      "put": {
        "tags": [
          "Divisions"
        ],
        "summary": "Update a division",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "createOrUpdateDivision",
        "description": "Update a Division by ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DivisionUpdateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "name": "VLD",
                    "description": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Divisions"
        ],
        "summary": "Delete a division",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "deleteDivision",
        "description": "Delete a Division by Id"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Divisions"
      }
    },
    "/{customer}/metadata/divisions/export": {
      "get": {
        "tags": [
          "Divisions"
        ],
        "summary": "Export divisions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DivisionResponse"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "_id": "string",
                        "photo": {
                          "_id": "string",
                          "url": "http://example.com",
                          "size": 0,
                          "mimeType": "string",
                          "encoding": "string"
                        },
                        "name": "string"
                      }
                    ]
                  }
                }
              }
            },
            "headers": {
              "Content-disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=metadata-divisions.json"
                },
                "required": true
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "exportDivisions",
        "description": "Export Divisions for download"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Divisions"
      }
    },
    "/{customer}/metadata/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get roles",
        "parameters": [
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405d"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "example": 100,
              "default": 100
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc",
            "schema": {
              "type": "string",
              "default": "desc",
              "example": "desc",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "function",
              "name"
            ],
            "x-example": "createdAt",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt",
                "name"
              ],
              "example": "createdAt"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                },
                "examples": {
                  "ListRolesResponse": {
                    "value": [
                      {
                        "priority": 1,
                        "name": "string",
                        "_id": "string"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getRoles",
        "description": "List Roles"
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create a role",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Mayor of Veurne"
                },
                "priority": {
                  "type": "integer",
                  "example": 0,
                  "minimum": 0
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Status 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "createRole",
        "description": "Create a Role"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Roles"
      }
    },
    "/{customer}/metadata/roles/export": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Export Roles",
        "description": "Exports roles for download as metadata-roles.json",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleResponse"
                  }
                }
              }
            },
            "headers": {
              "Content-disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=metadata-roles.json"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "exportRoles"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "example": "veurne",
            "type": "string"
          }
        }
      ],
      "x-restlet": {
        "section": "Roles"
      }
    },
    "/{customer}/metadata/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a role",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getRole",
        "description": "Get a Role by ID"
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Mayor of Veurne"
                },
                "priority": {
                  "type": "integer",
                  "example": 0,
                  "minimum": 0
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "updateRole",
        "description": "Update a Role by ID"
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteRole",
        "description": "Delete a Role by ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Roles"
      }
    },
    "/{customer}/metadata/microphones": {
      "get": {
        "tags": [
          "Microphones"
        ],
        "summary": "Get Microphones",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ],
            "x-example": "true"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-example": 100,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "5ce92d6a7fc5fa37c33eb885",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405d"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "desc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "status",
              "createdAt",
              "updatedAt",
              "mac",
              "id",
              "uuid",
              "room"
            ],
            "x-example": "status",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "example": "createdAt"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "2",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "refid",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "2-1",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MicrophoneResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getMirophones",
        "description": "List Microphones"
      },
      "post": {
        "tags": [
          "Microphones"
        ],
        "summary": "Create microphone",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "room": {
                  "$ref": "#/definitions/room"
                },
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "uuid": {
                  "type": "string"
                },
                "mac": {
                  "type": "string"
                },
                "manufacturer": {
                  "type": "string",
                  "enum": [
                    "televic",
                    "shure",
                    "bosch",
                    "sennheiser"
                  ]
                },
                "active": {
                  "type": "boolean"
                },
                "status": {
                  "type": "boolean",
                  "default": false
                }
              },
              "required": [
                "room",
                "name",
                "id",
                "uuid",
                "mac"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Status 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MicrophoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "createMicrophone",
        "description": "Create a Microphone"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Microphones"
      }
    },
    "/{customer}/metadata/microphones/{id}": {
      "get": {
        "tags": [
          "Microphones"
        ],
        "summary": "Get microphone",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MicrophoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getMicrophone",
        "description": "Get a Microphone by ID"
      },
      "put": {
        "tags": [
          "Microphones"
        ],
        "summary": "Update microphone",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "room": {
                  "$ref": "#/definitions/room"
                },
                "id": {
                  "type": "integer"
                },
                "uuid": {
                  "type": "string"
                },
                "mac": {
                  "type": "string"
                },
                "manufacturer": {
                  "type": "string",
                  "enum": [
                    "televic",
                    "shure",
                    "bosch",
                    "sennheiser"
                  ]
                },
                "active": {
                  "type": "boolean"
                },
                "status": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MicrophoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "updateMicrophone",
        "description": "Update a Microhphone by ID"
      },
      "delete": {
        "tags": [
          "Microphones"
        ],
        "summary": "Delete Microphone",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MicrophoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteMicrophone",
        "description": "Delete a Microphone by ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "objectID",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Microphones"
      }
    },
    "/{customer}/metadata/microphones/room/{room}": {
      "get": {
        "tags": [
          "Microphones"
        ],
        "summary": "Get microphones in a room",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "false",
              "true"
            ],
            "x-example": "true"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "5ce92d6a7fc5fa37c33eb885"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "x-example": 100
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "desc"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "microphone id",
            "x-example": "2"
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "status",
              "createdAt",
              "updatedAt",
              "id",
              "uuid",
              "room",
              "mac"
            ],
            "x-example": "status"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "refid",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "2-1"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MicrophoneResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getMicrophonesInRoom",
        "description": "Get Microhpones by RoomID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "example": "veurne",
            "type": "string"
          }
        },
        {
          "name": "room",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "Room unique id",
          "x-example": 2,
          "minimum": 1,
          "schema": {
            "type": "integer",
            "example": 1
          }
        }
      ],
      "x-restlet": {
        "section": "Microphones"
      }
    },
    "/{customer}/metadata/attendees": {
      "get": {
        "tags": [
          "Attendees"
        ],
        "summary": "Get attendees",
        "parameters": [
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405d"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc",
              "default": "desc",
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "_id"
            ],
            "x-example": "createdAt",
            "schema": {
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "example": "createdAt",
              "default": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "microphone",
            "in": "query",
            "required": false,
            "type": "integer",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1,
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendeeResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "_id": "5f4385e18365ec18ae853f6d",
                        "delegate": {
                          "_id": "5d5aad5e39d02e4c4bc3fb40",
                          "firstname": "John",
                          "lastname": "Doe",
                          "description": "string",
                          "photo": {
                            "_id": "5f44bbe68365ec18ae854003",
                            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                            "size": 2751,
                            "mimeType": "image/png",
                            "encoding": "7bit",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z"
                          },
                          "division": {
                            "_id": "5d5aad5e39d02e4c4bc3fb40",
                            "photo": {
                              "_id": "5f44bbe68365ec18ae854003",
                              "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                              "size": 2751,
                              "mimeType": "image/png",
                              "encoding": "7bit",
                              "createdAt": "2020-08-25T08:40:40.601Z",
                              "updatedAt": "2020-08-25T08:44:42.900Z"
                            },
                            "name": "VLD",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "role": {
                            "priority": 1,
                            "name": "Burgemeester",
                            "_id": "5d5aadd539d02e4c4bc3fb5c",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "email": "user@example.com",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "refId": "JD01",
                          "__v": 0
                        },
                        "microphone": {
                          "_id": "5f44bbe78365ec18ae854004",
                          "name": "Microphone 1",
                          "uuid": "mic1",
                          "id": 1,
                          "status": true,
                          "description": "string",
                          "room": 1,
                          "manufacturer": "televic",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "role": {
                          "priority": 1,
                          "name": "Burgemeester",
                          "_id": "5d5aadd539d02e4c4bc3fb5c",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "session": 100,
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getAttendees",
        "description": "List Attendees"
      },
      "post": {
        "tags": [
          "Attendees"
        ],
        "summary": "Create attendees",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "delegate",
                "microphone",
                "session"
              ],
              "properties": {
                "delegate": {
                  "$ref": "#/definitions/ID"
                },
                "role": {
                  "$ref": "#/definitions/ID"
                },
                "microphone": {
                  "$ref": "#/definitions/ID"
                },
                "session": {
                  "$ref": "#/definitions/session"
                }
              }
            },
            "x-examples": {
              "example-1": {
                "delegate": "5ce92d6a7fc5fa37c33eb885",
                "role": "5ce92d6a7fc5fa37c33eb885",
                "microphone": "5ce92d6a7fc5fa37c33eb885",
                "session": 100
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Status 201",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendeeResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f4385e18365ec18ae853f6d",
                      "delegate": {
                        "_id": "5d5aad5e39d02e4c4bc3fb40",
                        "firstname": "John",
                        "lastname": "Doe",
                        "description": "string",
                        "photo": {
                          "_id": "5f44bbe68365ec18ae854003",
                          "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                          "size": 2751,
                          "mimeType": "image/png",
                          "encoding": "7bit",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z"
                        },
                        "division": {
                          "_id": "5d5aad5e39d02e4c4bc3fb40",
                          "photo": {
                            "_id": "5f44bbe68365ec18ae854003",
                            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                            "size": 2751,
                            "mimeType": "image/png",
                            "encoding": "7bit",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z"
                          },
                          "name": "VLD",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "role": {
                          "priority": 1,
                          "name": "Burgemeester",
                          "_id": "5d5aadd539d02e4c4bc3fb5c",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "email": "user@example.com",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "refId": "JD01",
                        "__v": 0
                      },
                      "microphone": {
                        "_id": "5f44bbe78365ec18ae854004",
                        "name": "Microphone 1",
                        "uuid": "mic1",
                        "id": 1,
                        "status": true,
                        "description": "string",
                        "room": 1,
                        "manufacturer": "televic",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      },
                      "role": {
                        "priority": 1,
                        "name": "Burgemeester",
                        "_id": "5d5aadd539d02e4c4bc3fb5c",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      },
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "createAttendee",
        "description": "Add Attendee for Session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendeeCreateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "delegate": "5d5aad5e39d02e4c4bc3fb40",
                    "role": "5d5aadd539d02e4c4bc3fb5c",
                    "microphone": "5f44bbe78365ec18ae854004",
                    "session": 100
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "example": "veurne",
            "type": "string"
          }
        }
      ],
      "x-restlet": {
        "section": "Attendees"
      }
    },
    "/{customer}/metadata/attendees/{id}": {
      "get": {
        "tags": [
          "Attendees"
        ],
        "summary": "Get an attendee",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getAttendee",
        "description": "Get Attendee by ID"
      },
      "put": {
        "tags": [
          "Attendees"
        ],
        "summary": "Update an attendee",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "delegate": {
                  "$ref": "#/definitions/ID"
                },
                "role": {
                  "$ref": "#/definitions/ID"
                },
                "microphone": {
                  "$ref": "#/definitions/ID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendeeResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f4385e18365ec18ae853f6d",
                      "delegate": {
                        "_id": "5d5aad5e39d02e4c4bc3fb40",
                        "firstname": "John",
                        "lastname": "Doe",
                        "description": "string",
                        "photo": {
                          "_id": "5f44bbe68365ec18ae854003",
                          "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                          "size": 2751,
                          "mimeType": "image/png",
                          "encoding": "7bit",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z"
                        },
                        "division": {
                          "_id": "5d5aad5e39d02e4c4bc3fb40",
                          "photo": {
                            "_id": "5f44bbe68365ec18ae854003",
                            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                            "size": 2751,
                            "mimeType": "image/png",
                            "encoding": "7bit",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z"
                          },
                          "name": "VLD",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "role": {
                          "priority": 1,
                          "name": "Burgemeester",
                          "_id": "5d5aadd539d02e4c4bc3fb5c",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "email": "user@example.com",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "refId": "JD01",
                        "__v": 0
                      },
                      "microphone": {
                        "_id": "5f44bbe78365ec18ae854004",
                        "name": "Microphone 1",
                        "uuid": "mic1",
                        "id": 1,
                        "status": true,
                        "description": "string",
                        "room": 1,
                        "manufacturer": "televic",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      },
                      "role": {
                        "priority": 1,
                        "name": "Burgemeester",
                        "_id": "5d5aadd539d02e4c4bc3fb5c",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      },
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "updateAttendee",
        "description": "Update Attendee by ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttendeeUpdateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "delegate": "5d5aad5e39d02e4c4bc3fb40",
                    "role": "5d5aadd539d02e4c4bc3fb5c",
                    "microphone": "5f44bbe78365ec18ae854004"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Attendees"
        ],
        "summary": "Delete an attendee",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendeeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteAttendee",
        "description": "Delete Attendee by ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "objectId",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Attendees"
      }
    },
    "/{customer}/metadata/attendees/session/{session}": {
      "get": {
        "tags": [
          "Attendees"
        ],
        "summary": "Get attendees by session",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc"
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "_id"
            ],
            "x-example": "createdAt"
          },
          {
            "name": "microphone",
            "in": "query",
            "required": false,
            "type": "integer"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendeeResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "_id": "5f4385e18365ec18ae853f6d",
                        "delegate": {
                          "_id": "5d5aad5e39d02e4c4bc3fb40",
                          "firstname": "John",
                          "lastname": "Doe",
                          "description": "string",
                          "photo": {
                            "_id": "5f44bbe68365ec18ae854003",
                            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                            "size": 2751,
                            "mimeType": "image/png",
                            "encoding": "7bit",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z"
                          },
                          "division": {
                            "_id": "5d5aad5e39d02e4c4bc3fb40",
                            "photo": {
                              "_id": "5f44bbe68365ec18ae854003",
                              "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                              "size": 2751,
                              "mimeType": "image/png",
                              "encoding": "7bit",
                              "createdAt": "2020-08-25T08:40:40.601Z",
                              "updatedAt": "2020-08-25T08:44:42.900Z"
                            },
                            "name": "VLD",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "role": {
                            "priority": 1,
                            "name": "Burgemeester",
                            "_id": "5d5aadd539d02e4c4bc3fb5c",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "email": "user@example.com",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "refId": "JD01",
                          "__v": 0
                        },
                        "microphone": {
                          "_id": "5f44bbe78365ec18ae854004",
                          "name": "Microphone 1",
                          "uuid": "mic1",
                          "id": 1,
                          "status": true,
                          "description": "string",
                          "room": 1,
                          "manufacturer": "televic",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "role": {
                          "priority": 1,
                          "name": "Burgemeester",
                          "_id": "5d5aadd539d02e4c4bc3fb5c",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "session": 100,
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getAttendeesBySession",
        "description": "Get Attendees by Session"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "session",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "Session unique id",
          "x-example": 100,
          "minimum": 1,
          "schema": {
            "type": "integer",
            "example": 100
          }
        }
      ],
      "x-restlet": {
        "section": "Attendees"
      }
    },
    "/{customer}/metadata/speeches": {
      "get": {
        "tags": [
          "Speeches"
        ],
        "summary": "Get speeches",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "5cf909247805517211b124e7",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405e"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "start.realTime",
              "stop.realTime",
              "microphone.id"
            ],
            "x-example": "createdAt",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "example": "createdAt"
            }
          },
          {
            "name": "microphone",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-example": 5,
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpeechResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "_id": "5f4387caad10e2185ffd74a6",
                        "start": 1598261308917,
                        "stop": 1598261309922,
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0,
                        "session": 100,
                        "room": 1,
                        "microphone": {
                          "_id": "5f44bbe78365ec18ae854004",
                          "name": "Microphone 1",
                          "uuid": "mic1",
                          "id": 1,
                          "status": true,
                          "description": "string",
                          "room": 1,
                          "manufacturer": "televic",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getSpeeches",
        "description": "List Speeches"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Speeches"
      }
    },
    "/{customer}/metadata/speeches/{id}": {
      "get": {
        "tags": [
          "Speeches"
        ],
        "summary": "Get a speech",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeechResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f4387caad10e2185ffd74a6",
                      "start": 1598261308917,
                      "stop": 1598261309922,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0,
                      "session": 100,
                      "room": 1,
                      "microphone": {
                        "_id": "5f44bbe78365ec18ae854004",
                        "name": "Microphone 1",
                        "uuid": "mic1",
                        "id": 1,
                        "status": true,
                        "description": "string",
                        "room": 1,
                        "manufacturer": "televic",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "description": "Get Speech by ID",
        "operationId": "getSpeech"
      },
      "delete": {
        "tags": [
          "Speeches"
        ],
        "summary": "Delete a speech",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpeechResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f4387caad10e2185ffd74a6",
                      "start": 1598261308917,
                      "stop": 1598261309922,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0,
                      "session": 100,
                      "room": 1,
                      "microphone": {
                        "_id": "5f44bbe78365ec18ae854004",
                        "name": "Microphone 1",
                        "uuid": "mic1",
                        "id": 1,
                        "status": true,
                        "description": "string",
                        "room": 1,
                        "manufacturer": "televic",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteSpeech",
        "description": "Delete Speech by ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "objectId",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Speeches"
      }
    },
    "/{customer}/metadata/speeches/session/{session}/status": {
      "post": {
        "tags": [
          "Speeches"
        ],
        "summary": "Update speech status",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "microphone",
                "room",
                "status",
                "timestamp"
              ],
              "properties": {
                "microphone": {
                  "type": "number",
                  "example": 7
                },
                "status": {
                  "type": "boolean",
                  "example": true
                },
                "timestamp": {
                  "type": "number",
                  "example": 1559213701
                },
                "room": {
                  "$ref": "#/definitions/room"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "room": {
                      "$ref": "#/components/schemas/Room"
                    },
                    "session": {
                      "$ref": "#/components/schemas/Session"
                    },
                    "uuid": {
                      "$ref": "#/components/schemas/MicrophoneID"
                    },
                    "timestamp": {
                      "$ref": "#/components/schemas/SpeechStart"
                    },
                    "status": {
                      "$ref": "#/components/schemas/SpeechStatus"
                    },
                    "attendee": {
                      "$ref": "#/components/schemas/AttendeeResponse"
                    },
                    "microphone": {
                      "$ref": "#/components/schemas/MicrophoneResponse"
                    }
                  },
                  "required": [
                    "room",
                    "session",
                    "uuid",
                    "timestamp",
                    "status",
                    "attendee",
                    "microphone"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "room": 1,
                      "session": 100,
                      "uuid": 1,
                      "timestamp": 1598261308917,
                      "status": true,
                      "attendee": {
                        "_id": "5f4385e18365ec18ae853f6d",
                        "delegate": {
                          "_id": "5d5aad5e39d02e4c4bc3fb40",
                          "firstname": "John",
                          "lastname": "Doe",
                          "description": "string",
                          "photo": {
                            "_id": "5f44bbe68365ec18ae854003",
                            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                            "size": 2751,
                            "mimeType": "image/png",
                            "encoding": "7bit",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z"
                          },
                          "division": {
                            "_id": "5d5aad5e39d02e4c4bc3fb40",
                            "photo": {
                              "_id": "5f44bbe68365ec18ae854003",
                              "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                              "size": 2751,
                              "mimeType": "image/png",
                              "encoding": "7bit",
                              "createdAt": "2020-08-25T08:40:40.601Z",
                              "updatedAt": "2020-08-25T08:44:42.900Z"
                            },
                            "name": "VLD",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "role": {
                            "priority": 1,
                            "name": "Burgemeester",
                            "_id": "5d5aadd539d02e4c4bc3fb5c",
                            "createdAt": "2020-08-25T08:40:40.601Z",
                            "updatedAt": "2020-08-25T08:44:42.900Z",
                            "__v": 0
                          },
                          "email": "user@example.com",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "refId": "JD01",
                          "__v": 0
                        },
                        "microphone": {
                          "_id": "5f44bbe78365ec18ae854004",
                          "name": "Microphone 1",
                          "uuid": "mic1",
                          "id": 1,
                          "status": true,
                          "description": "string",
                          "room": 1,
                          "manufacturer": "televic",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "role": {
                          "priority": 1,
                          "name": "Burgemeester",
                          "_id": "5d5aadd539d02e4c4bc3fb5c",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        },
                        "session": 100,
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      },
                      "microphone": {
                        "_id": "5f44bbe78365ec18ae854004",
                        "name": "Microphone 1",
                        "uuid": "mic1",
                        "id": 1,
                        "status": true,
                        "description": "string",
                        "room": 1,
                        "manufacturer": "televic",
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error"
          }
        },
        "operationId": "updateSpeechStatus",
        "description": "Update Microphone Status - Creates Speech Entry based on status, enable microphone results in a new speech entry with timestamp as start",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "room": {
                    "$ref": "#/components/schemas/Room"
                  },
                  "session": {
                    "$ref": "#/components/schemas/Session"
                  },
                  "timestamp": {
                    "$ref": "#/components/schemas/SpeechStart"
                  },
                  "status": {
                    "$ref": "#/components/schemas/SpeechStatus"
                  },
                  "microphone": {
                    "$ref": "#/components/schemas/MicrophoneID"
                  }
                },
                "required": [
                  "room",
                  "session",
                  "timestamp",
                  "status",
                  "microphone"
                ]
              },
              "examples": {
                "example": {
                  "value": {
                    "room": 1,
                    "session": 100,
                    "start": 1598261308917,
                    "status": true,
                    "microphone": 1
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "session",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "Session unique id",
          "x-example": 100,
          "minimum": 1,
          "schema": {
            "type": "integer",
            "example": 100
          }
        }
      ],
      "x-restlet": {
        "section": "Speeches"
      }
    },
    "/{customer}/metadata/speeches/session/{session}": {
      "get": {
        "tags": [
          "Speeches"
        ],
        "summary": "Get speeches by session",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "5cf909247805517211b124e7",
            "schema": {
              "type": "string",
              "example": "5f44f1e48365ec18ae85405e"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100,
            "schema": {
              "type": "integer",
              "default": 100,
              "example": 100,
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc",
            "schema": {
              "type": "string",
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "desc"
            }
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "start.realTime",
              "stop.realTime",
              "microphone.id"
            ],
            "x-example": "createdAt",
            "schema": {
              "type": "string",
              "default": "createdAt",
              "enum": [
                "createdAt",
                "updatedAt"
              ],
              "example": "createdAt"
            }
          },
          {
            "name": "microphone",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-example": 5,
            "schema": {
              "type": "integer",
              "example": 1,
              "minimum": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpeechResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "_id": "5f4387caad10e2185ffd74a6",
                        "start": 1598261308917,
                        "stop": 1598261309922,
                        "createdAt": "2020-08-25T08:40:40.601Z",
                        "updatedAt": "2020-08-25T08:44:42.900Z",
                        "__v": 0,
                        "session": 100,
                        "room": 1,
                        "microphone": {
                          "_id": "5f44bbe78365ec18ae854004",
                          "name": "Microphone 1",
                          "uuid": "mic1",
                          "id": 1,
                          "status": true,
                          "description": "string",
                          "room": 1,
                          "manufacturer": "televic",
                          "createdAt": "2020-08-25T08:40:40.601Z",
                          "updatedAt": "2020-08-25T08:44:42.900Z",
                          "__v": 0
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getSpeechesBySession",
        "description": "Get Speeches by Session"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "session",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "Session unique id",
          "x-example": 100,
          "minimum": 1,
          "schema": {
            "type": "integer",
            "example": 100
          }
        }
      ],
      "x-restlet": {
        "section": "Speeches"
      }
    },
    "/{customer}/metadata/topics": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Create a topic",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Topic Name 3"
                },
                "description": {
                  "type": "string",
                  "example": "Description for Topic Name 3"
                },
                "active": {
                  "type": "boolean",
                  "example": true
                },
                "start": {
                  "type": "object",
                  "properties": {
                    "realTime": {
                      "type": "integer",
                      "example": 1560115860000
                    }
                  },
                  "required": [
                    "realTime"
                  ]
                },
                "stop": {
                  "type": "object",
                  "properties": {
                    "realTime": {
                      "type": "integer",
                      "example": 1560116160000
                    },
                    "relativeTime": {
                      "type": "integer",
                      "example": 30
                    }
                  }
                },
                "session": {
                  "$ref": "#/definitions/session"
                }
              },
              "required": [
                "name",
                "session"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "createTopic",
        "description": "Create a Topic for Session",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicCreateRequest"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/topics/{id}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Get a topic",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getTopic",
        "description": "Get a Topic for ID"
      },
      "put": {
        "tags": [
          "Topics"
        ],
        "summary": "Update a topic",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Topic Name 1"
                },
                "description": {
                  "type": "string",
                  "description": "Description for Topic Name 1"
                },
                "active": {
                  "type": "boolean",
                  "example": false
                },
                "start": {
                  "required": [
                    "realTime"
                  ],
                  "type": "object",
                  "properties": {
                    "realTime": {
                      "type": "integer",
                      "example": 1560115860000
                    }
                  }
                },
                "stop": {
                  "required": [
                    "realTime",
                    "relativeTime"
                  ],
                  "type": "object",
                  "properties": {
                    "realTime": {
                      "type": "integer",
                      "example": 1560116160000
                    },
                    "relativeTime": {
                      "type": "string",
                      "example": "30"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "updateTopic",
        "description": "Update a Topic for ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicUpdateRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "name": "Topic 1",
                    "description": "Topic Content 1",
                    "start": {
                      "realTime": "2020-08-25T08:42:26.271Z"
                    },
                    "stop": {
                      "realTime": "2020-08-25T08:44:42.887Z"
                    },
                    "priority": 1
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Topics"
        ],
        "summary": "Delete a topic",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "deleteTopic",
        "description": "Delete Topic for ID"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "objectId",
          "x-example": "5ce92d6a7fc5fa37c33eb885",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/topics/session/{session}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Get topics by session",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean",
            "x-example": true
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "string",
            "x-example": "5cfaa2571695e82e0d5c590b"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 100,
            "minimum": 1,
            "maximum": 100,
            "x-example": 100
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ],
            "x-example": "asc"
          },
          {
            "name": "sortField",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "createdAt",
              "updatedAt",
              "name",
              "stop.realTime",
              "start.realTime"
            ],
            "x-example": "createdAt"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "session",
            "in": "query",
            "required": false,
            "type": "integer",
            "x-example": 100
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Status 400",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateParamsErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Status 401",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Status 403",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Status 500"
          }
        },
        "operationId": "getTopicsBySession",
        "description": "Get Topics by Session"
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "Customer unique name",
          "x-example": "veurne",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "session",
          "in": "path",
          "required": true,
          "type": "integer",
          "description": "Session unique id",
          "x-example": 100,
          "minimum": 1,
          "schema": {
            "type": "integer",
            "example": 100
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/topics/{id}/stop": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Stop a Topic",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "stop": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "stopTopic",
        "description": "Stop a Topic by ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "session": 100
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/topics/{id}/start": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Start a topic",
        "consumes": [],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "start": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "startTopic",
        "description": "Start a Topic by ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "session": 100
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/topics/{id}/reset": {
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Reset a topic",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status 200",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopicResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "_id": "5f44ce018365ec18ae854022",
                      "name": "Topic 1",
                      "description": "Topic Content 1",
                      "status": true,
                      "start": {
                        "realTime": "2020-08-25T08:42:26.271Z"
                      },
                      "stop": {
                        "realTime": "2020-08-25T08:44:42.887Z",
                        "relativeTime": 136
                      },
                      "priority": 1,
                      "session": 100,
                      "createdAt": "2020-08-25T08:40:40.601Z",
                      "updatedAt": "2020-08-25T08:44:42.900Z",
                      "__v": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "operationId": "resetTopic",
        "description": "Reset a Topic by ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session": {
                    "$ref": "#/components/schemas/Session"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "session": 100
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "customer",
          "in": "path",
          "required": true,
          "type": "string",
          "minLength": 3,
          "maxLength": 255,
          "schema": {
            "type": "string",
            "example": "veurne"
          }
        },
        {
          "name": "id",
          "in": "path",
          "required": true,
          "type": "string",
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          }
        }
      ],
      "x-restlet": {
        "section": "Topics"
      }
    },
    "/{customer}/metadata/delegates/upload/{id}": {
      "post": {
        "description": "Upload a Delegate Photo",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "upload": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Upload a Delegate Photo",
        "operationId": "uploadPhotoDelegate",
        "tags": [
          "Delegates"
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "veurne"
          },
          "name": "customer",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/{customer}/metadata/divisions/upload/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "veurne"
          },
          "name": "customer",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "example": "5f44e7c2ad10e2185ffd759f"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Upload a Division Photo",
        "operationId": "uploadPhotoDivision",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Request parameters did not validate"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAuthErrorResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "error": "Token could not be verified"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateEndpointErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "upload": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Upload a Division Photo",
        "tags": [
          "Divisions"
        ]
      }
    }
  },
  "securityDefinitions": {
    "Custom": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": ""
    }
  },
  "definitions": {
    "customer": {
      "type": "string",
      "example": "veurne",
      "x-restlet": {
        "section": "Data Types"
      },
      "x-examples": {
        "example-1": "veurne"
      },
      "x-tags": [
        "customer"
      ],
      "minLength": 3,
      "maxLength": 255
    },
    "ID": {
      "type": "string",
      "example": "507f1f77bcf86cd799439011",
      "x-restlet": {
        "section": "Data Types"
      }
    },
    "room": {
      "type": "integer",
      "example": 2,
      "x-restlet": {
        "section": "Data Types"
      }
    },
    "session": {
      "type": "integer",
      "example": 100,
      "x-restlet": {
        "section": "Data Types"
      }
    },
    "delegates": {
      "type": "object",
      "example": {
        "firstname": "d7lxre",
        "lastname": "i7wb95",
        "email": "support@streamovations.be",
        "refId": "JV01",
        "active": true,
        "division": "507f1f77bcf86cd799439011",
        "role": "507f1f77bcf86cd79947896"
      },
      "x-restlet": {
        "section": "Data Types"
      },
      "properties": {
        "firstname": {
          "type": "string",
          "description": "First name of delegate",
          "example": "John"
        },
        "lastname": {
          "type": "string",
          "description": "Last name of delegate",
          "example": "Vanhoucke"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "refId": {
          "type": "string"
        },
        "division": {
          "$ref": "#/definitions/ID"
        },
        "role": {
          "$ref": "#/definitions/ID"
        }
      },
      "required": [
        "firstname",
        "lastname",
        "refId",
        "division",
        "role"
      ]
    },
    "delegatesOptional": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string",
          "description": "First name of delegate"
        },
        "lastname": {
          "type": "string",
          "description": "Last name of delegate"
        },
        "email": {
          "type": "string"
        },
        "refId": {
          "type": "string"
        },
        "division": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "role": {
          "type": "string"
        }
      },
      "example": {
        "firstname": "d7lxre",
        "lastname": "i7wb95",
        "email": "support@streamovations.be",
        "refId": "JV01",
        "active": true,
        "division": "507f1f77bcf86cd799439011",
        "role": "507f1f77bcf86cd79947896"
      },
      "x-restlet": {
        "section": "Data Types"
      }
    }
  },
  "x-restlet": {
    "sections": {
      "Delegates": {
        "description": "Only one delegate can be bound to one attendee per session, an attendee can only have one delegate per session"
      },
      "Divisions": {
        "description": "A division can be bound to multiple delegates\n\nMultiple divisions can be bound to one delegate"
      },
      "Roles": {
        "description": "A role can be bound to multiple attendees\n\nMultiple roles can be bound to one attendee per session"
      },
      "Microphones": {
        "description": "Microphones are unique per customer based on an id, uuid and mac address and are bound to one room id. \n\nMicrophones cannot have the same id, uuid or mac address and cannot be bound to multiple rooms per microphone.\n\nA microphone can only be bound to one attendee per session, unless sharedMicrophone option is given when creating an attendee for a session"
      },
      "Attendees": {
        "description": "One attendee is bound to one session id\n\nOne attendee is bound to one delegate\n\nOne attendee is bound to one microphone, unless sharedMicrophone option is set when creating an attendee to share a microphone with multiple attendees\n\nOne attendee is bound to one seat\n\nOne attendee can be bound to one or more roles, multiple attendees can have the same roles\n\n"
      },
      "Speeches": {
        "description": "One Speech is bound to one session id\n\nOne Speech is bound to one Attendee\n\n"
      },
      "Topics": {
        "description": "One topic is bound to one session id"
      },
      "Other Metadata": {
        "description": "All other metadata that does not belong to custom created metadata section like\n\n* delegates\n* roles\n* attendees\n* microphones\n\nOther metadata data routes can be used to create metadata types dynamically"
      },
      "System": {},
      "Data Types": {}
    }
  },
  "schemes": [
    "https"
  ],
  "servers": [
    {
      "url": "https://core-api.streamovations.be",
      "description": "demo"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT Token": {
        "name": "API Key",
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Session": {
        "type": "integer",
        "title": "Session",
        "example": 100,
        "minimum": 1,
        "x-examples": {
          "example": 100
        }
      },
      "Room": {
        "type": "integer",
        "title": "Room",
        "x-examples": {
          "example": 1
        },
        "example": 1,
        "minimum": 1
      },
      "RoleResponse": {
        "title": "RolesResponse",
        "type": "object",
        "description": "",
        "x-examples": {
          "example": {
            "priority": 1,
            "name": "Burgemeester",
            "_id": "5d5aadd539d02e4c4bc3fb5c",
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "__v": 0
          }
        },
        "properties": {
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "name": {
            "$ref": "#/components/schemas/RoleName"
          },
          "_id": {
            "$ref": "#/components/schemas/Role_ID"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "priority",
          "name",
          "_id",
          "createdAt",
          "updatedAt",
          "__v"
        ],
        "x-tags": [
          "Roles"
        ]
      },
      "Priority": {
        "type": "integer",
        "title": "Priority",
        "description": "",
        "example": 1,
        "x-examples": {
          "example": 1
        }
      },
      "DelegateResponse": {
        "title": "DelegatesResponse",
        "type": "object",
        "x-examples": {
          "example": {
            "_id": "5d5aad5e39d02e4c4bc3fb40",
            "firstname": "John",
            "lastname": "Doe",
            "description": "string",
            "photo": {
              "_id": "5f44bbe68365ec18ae854003",
              "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
              "size": 2751,
              "mimeType": "image/png",
              "encoding": "7bit",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z"
            },
            "division": {
              "_id": "5d5aad5e39d02e4c4bc3fb40",
              "photo": {
                "_id": "5f44bbe68365ec18ae854003",
                "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                "size": 2751,
                "mimeType": "image/png",
                "encoding": "7bit",
                "createdAt": "2020-08-25T08:40:40.601Z",
                "updatedAt": "2020-08-25T08:44:42.900Z"
              },
              "name": "VLD",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z"
            },
            "role": {
              "priority": 1,
              "name": "Burgemeester",
              "_id": "5d5aadd539d02e4c4bc3fb5c",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z"
            },
            "email": "user@example.com",
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "refId": "JD01",
            "__v": 0
          }
        },
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Delegate_ID"
          },
          "firstname": {
            "$ref": "#/components/schemas/DelegateFirstName"
          },
          "lastname": {
            "$ref": "#/components/schemas/DelegateLastName"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "photo": {
            "$ref": "#/components/schemas/PhotoResponse"
          },
          "division": {
            "$ref": "#/components/schemas/DivisionResponse"
          },
          "role": {
            "$ref": "#/components/schemas/RoleResponse"
          },
          "email": {
            "$ref": "#/components/schemas/DelegateEmail"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "refId": {
            "$ref": "#/components/schemas/DelegateReference"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "_id",
          "firstname",
          "lastname",
          "division",
          "role",
          "createdAt",
          "updatedAt",
          "refId"
        ],
        "description": "",
        "x-tags": [
          "Delegates"
        ]
      },
      "DelegateFirstName": {
        "type": "string",
        "title": "DelegateFirstName",
        "x-examples": {
          "example": "John"
        },
        "example": "John",
        "x-tags": [
          "Delegates"
        ]
      },
      "DelegateLastName": {
        "type": "string",
        "title": "DelegateLastName",
        "example": "Doe",
        "x-examples": {
          "example": "Doe"
        },
        "x-tags": [
          "Delegates"
        ]
      },
      "DelegateEmail": {
        "type": "string",
        "title": "DelegateEmail",
        "format": "email",
        "example": "user@example.com",
        "x-examples": {
          "example": "user@example.com"
        },
        "x-tags": [
          "Delegates"
        ]
      },
      "DivisionResponse": {
        "title": "DivisionResponse",
        "type": "object",
        "x-examples": {
          "example": {
            "_id": "5d5aad5e39d02e4c4bc3fb40",
            "photo": {
              "_id": "5f44bbe68365ec18ae854003",
              "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
              "size": 2751,
              "mimeType": "image/png",
              "encoding": "7bit",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z"
            },
            "name": "VLD",
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "__v": 0
          }
        },
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Division_ID"
          },
          "photo": {
            "$ref": "#/components/schemas/PhotoResponse"
          },
          "name": {
            "$ref": "#/components/schemas/DivisionName"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "_id",
          "name",
          "createdAt",
          "updatedAt",
          "__v"
        ],
        "x-tags": [
          "Divisions"
        ]
      },
      "PhotoResponse": {
        "title": "PhotoResponse",
        "type": "object",
        "x-examples": {
          "example": {
            "_id": "5f44bbe68365ec18ae854003",
            "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
            "size": 2751,
            "mimeType": "image/png",
            "encoding": "7bit",
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z"
          }
        },
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Photo_ID"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "example": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2"
          },
          "size": {
            "type": "integer",
            "example": 2751
          },
          "mimeType": {
            "type": "string",
            "example": "image/png"
          },
          "encoding": {
            "type": "string",
            "example": "7bit"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          }
        },
        "required": [
          "_id",
          "url",
          "size",
          "mimeType",
          "encoding",
          "createdAt",
          "updatedAt"
        ]
      },
      "DivisionName": {
        "type": "string",
        "title": "DivisionName",
        "x-examples": {
          "example": "VLD"
        },
        "example": "VLD",
        "x-tags": [
          "Divisions"
        ]
      },
      "RoleName": {
        "type": "string",
        "title": "RoleName",
        "x-examples": {
          "example": "Burgemeester"
        },
        "example": "Burgemeester",
        "x-tags": [
          "Roles"
        ]
      },
      "MicrophoneManufacturer": {
        "type": "string",
        "title": "MicrophoneManufacturer",
        "enum": [
          "televic",
          "bosch",
          "shure",
          "sennheiser"
        ],
        "example": "televic",
        "x-examples": {
          "example": "televic"
        },
        "x-tags": [
          "Microphones"
        ]
      },
      "MicrophoneName": {
        "type": "string",
        "title": "MicrophoneName",
        "example": "Microphone 1",
        "x-examples": {
          "example": "Microphone 1"
        },
        "x-tags": [
          "Microphones"
        ]
      },
      "MicrophoneUUID": {
        "type": "string",
        "title": "MicrophoneUUID",
        "example": "mic1",
        "x-tags": [
          "Microphones"
        ]
      },
      "MicrophoneID": {
        "type": "integer",
        "title": "MicrophoneID",
        "minimum": 1,
        "x-examples": {
          "example": 1
        },
        "x-tags": [
          "Microphones"
        ]
      },
      "MicrophoneStatus": {
        "title": "MicrophoneStatus",
        "type": "boolean",
        "x-examples": {
          "example": true
        },
        "x-tags": [
          "Microphones"
        ]
      },
      "Description": {
        "title": "Description",
        "type": "string"
      },
      "MicrophoneResponse": {
        "title": "MicrophoneResponse",
        "type": "object",
        "x-examples": {
          "example": {
            "_id": "5f44bbe78365ec18ae854004",
            "name": "Microphone 1",
            "uuid": "mic1",
            "id": 1,
            "status": true,
            "description": "string",
            "room": 1,
            "manufacturer": "televic",
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "__v": 0
          }
        },
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Microphone_ID"
          },
          "name": {
            "$ref": "#/components/schemas/MicrophoneName"
          },
          "uuid": {
            "$ref": "#/components/schemas/MicrophoneUUID"
          },
          "id": {
            "$ref": "#/components/schemas/MicrophoneID"
          },
          "status": {
            "$ref": "#/components/schemas/MicrophoneStatus"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "room": {
            "$ref": "#/components/schemas/Room"
          },
          "manufacturer": {
            "$ref": "#/components/schemas/MicrophoneManufacturer"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "_id",
          "name",
          "uuid",
          "id",
          "status",
          "room",
          "manufacturer",
          "createdAt",
          "updatedAt",
          "__v"
        ],
        "x-tags": [
          "Microphones"
        ]
      },
      "DelegateCreateRequest": {
        "title": "DelegateCreateRequest",
        "type": "object",
        "x-examples": {
          "example": {
            "firstname": "John",
            "lastname": "Doe",
            "email": "user@example.com",
            "role": "5d5aadd539d02e4c4bc3fb5c",
            "division": "5d5aad5e39d02e4c4bc3fb40",
            "refId": "JD01"
          }
        },
        "properties": {
          "firstname": {
            "$ref": "#/components/schemas/DelegateFirstName"
          },
          "lastname": {
            "$ref": "#/components/schemas/DelegateLastName"
          },
          "email": {
            "$ref": "#/components/schemas/DelegateEmail"
          },
          "role": {
            "$ref": "#/components/schemas/Role_ID"
          },
          "division": {
            "$ref": "#/components/schemas/Division_ID"
          },
          "refId": {
            "$ref": "#/components/schemas/DelegateReference"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "role",
          "division",
          "refId"
        ],
        "x-tags": [
          "Delegates"
        ]
      },
      "Delegate_ID": {
        "type": "string",
        "title": "Delegate_ID",
        "x-examples": {},
        "example": "5d5aad5e39d02e4c4bc3fb40",
        "x-tags": [
          "Delegates"
        ]
      },
      "Role_ID": {
        "type": "string",
        "title": "Role_ID",
        "example": "5d5aadd539d02e4c4bc3fb5c",
        "x-examples": {
          "example": "5d5aadd539d02e4c4bc3fb5c"
        },
        "x-tags": [
          "Roles"
        ]
      },
      "Division_ID": {
        "type": "string",
        "title": "Division_ID",
        "example": "5d5aad5e39d02e4c4bc3fb40",
        "x-examples": {
          "example": "5d5aad5e39d02e4c4bc3fb40"
        },
        "x-tags": [
          "Divisions"
        ]
      },
      "Microphone_ID": {
        "type": "string",
        "title": "Microphone_ID",
        "example": "5f44bbe78365ec18ae854004",
        "x-tags": [
          "Microphones"
        ]
      },
      "Photo_ID": {
        "type": "string",
        "title": "Photo_ID",
        "example": "5f44bbe68365ec18ae854003",
        "x-examples": {
          "example": "5f44bbe68365ec18ae854003"
        }
      },
      "Topic_ID": {
        "type": "string",
        "title": "Topic_ID",
        "example": "5f44ce018365ec18ae854022",
        "x-examples": {
          "example": "5f44ce018365ec18ae854022"
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicName": {
        "type": "string",
        "title": "TopicName",
        "example": "Topic 1",
        "x-examples": {
          "example": "Topic 1"
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicDescription": {
        "type": "string",
        "title": "TopicDescription",
        "example": "Topic Content 1",
        "x-examples": {
          "example": "Topic Content 1"
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicResponse": {
        "title": "TopicResponse",
        "type": "object",
        "x-examples": {
          "example": {
            "_id": "5f44ce018365ec18ae854022",
            "name": "Topic 1",
            "description": "Topic Content 1",
            "status": true,
            "start": {
              "realTime": "2020-08-25T08:42:26.271Z"
            },
            "stop": {
              "realTime": "2020-08-25T08:44:42.887Z",
              "relativeTime": 136
            },
            "priority": 1,
            "session": 100,
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "__v": 0
          }
        },
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Topic_ID"
          },
          "name": {
            "$ref": "#/components/schemas/TopicName"
          },
          "description": {
            "$ref": "#/components/schemas/TopicDescription"
          },
          "status": {
            "$ref": "#/components/schemas/TopicStatus"
          },
          "start": {
            "$ref": "#/components/schemas/TopicStart"
          },
          "stop": {
            "$ref": "#/components/schemas/TopicStop"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "_id",
          "name",
          "status",
          "priority",
          "session",
          "createdAt",
          "updatedAt",
          "__v"
        ],
        "x-tags": [
          "Topics"
        ]
      },
      "TopicStatus": {
        "title": "TopicStatus",
        "type": "boolean",
        "x-examples": {
          "example": true
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicStart": {
        "title": "TopicStart",
        "type": "object",
        "properties": {
          "realTime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-08-25T08:42:26.271Z"
          }
        },
        "x-examples": {
          "example": {
            "realTime": "2020-08-25T08:42:26.271Z"
          }
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicStop": {
        "title": "TopicStop",
        "type": "object",
        "x-examples": {
          "example": {
            "realTime": "2020-08-25T08:44:42.887Z",
            "relativeTime": 136
          }
        },
        "properties": {
          "realTime": {
            "type": "string",
            "format": "date-time",
            "example": "2020-08-25T08:44:42.887Z"
          },
          "relativeTime": {
            "type": "integer",
            "minimum": 0,
            "example": 136
          }
        },
        "required": [
          "realTime"
        ],
        "x-tags": [
          "Topics"
        ]
      },
      "createdAt": {
        "type": "string",
        "title": "createdAt",
        "format": "date-time",
        "example": "2020-08-25T08:40:40.601Z",
        "x-examples": {
          "example": "2020-08-25T08:40:40.601Z"
        }
      },
      "updatedAt": {
        "type": "string",
        "title": "updatedAt",
        "format": "date-time",
        "example": "2020-08-25T08:44:42.900Z",
        "x-examples": {
          "example": "2020-08-25T08:44:42.900Z"
        }
      },
      "DelegateReference": {
        "type": "string",
        "title": "DelegateReference",
        "example": "JD01",
        "x-examples": {
          "example": "JD01"
        },
        "x-tags": [
          "Delegates"
        ]
      },
      "DocumentVersion": {
        "type": "integer",
        "title": "DocumentVersion",
        "example": 0,
        "default": 0,
        "x-examples": {
          "example": 0
        }
      },
      "TopicCreateRequest": {
        "title": "TopicCreateRequest",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/TopicName"
          },
          "description": {
            "$ref": "#/components/schemas/TopicDescription"
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        },
        "required": [
          "name",
          "session"
        ],
        "x-examples": {
          "example": {
            "name": "Topic 1",
            "description": "Topic Content 1",
            "session": 100,
            "priority": 1
          }
        },
        "x-tags": [
          "Topics"
        ]
      },
      "TopicUpdateRequest": {
        "title": "TopicUpdateRequest",
        "x-examples": {
          "example": {
            "name": "Topic 1",
            "description": "Topic Content 1",
            "start": {
              "realTime": "2020-08-25T08:42:26.271Z"
            },
            "stop": {
              "realTime": "2020-08-25T08:44:42.887Z"
            },
            "priority": 1
          }
        },
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/TopicName"
          },
          "description": {
            "$ref": "#/components/schemas/TopicDescription"
          },
          "start": {
            "$ref": "#/components/schemas/TopicStart"
          },
          "stop": {
            "$ref": "#/components/schemas/TopicStop"
          },
          "priority": {
            "$ref": "#/components/schemas/Priority"
          }
        },
        "x-tags": [
          "Topics"
        ]
      },
      "SpeechResponse": {
        "title": "SpeechResponse",
        "type": "object",
        "x-tags": [
          "Speeches"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Speech_ID"
          },
          "start": {
            "$ref": "#/components/schemas/SpeechStart"
          },
          "stop": {
            "$ref": "#/components/schemas/SpeechStop"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "room": {
            "$ref": "#/components/schemas/Room"
          },
          "microphone": {
            "$ref": "#/components/schemas/MicrophoneResponse"
          },
          "status": {
            "$ref": "#/components/schemas/SpeechStatus"
          }
        },
        "required": [
          "_id",
          "start",
          "stop",
          "createdAt",
          "updatedAt",
          "__v",
          "session",
          "room",
          "microphone",
          "status"
        ]
      },
      "Speech_ID": {
        "type": "string",
        "title": "Speech_ID",
        "example": "5f4387caad10e2185ffd74a6",
        "x-examples": {
          "example": "5f4387caad10e2185ffd74a6"
        },
        "x-tags": [
          "Speeches"
        ]
      },
      "SpeechStart": {
        "type": "integer",
        "title": "SpeechStart",
        "example": 1598261308917,
        "x-examples": {
          "example": 1598261308917
        },
        "x-tags": [
          "Speeches"
        ]
      },
      "SpeechStop": {
        "type": "integer",
        "title": "SpeechStop",
        "example": 1598261309922,
        "x-examples": {
          "example": 1598261309922
        },
        "x-tags": [
          "Speeches"
        ]
      },
      "SpeechStatus": {
        "title": "SpeechStatus",
        "type": "boolean",
        "x-examples": {
          "example": true
        },
        "x-tags": [
          "Speeches"
        ]
      },
      "AttendeeResponse": {
        "title": "AttendeeResponse",
        "type": "object",
        "x-tags": [
          "Attendees"
        ],
        "properties": {
          "_id": {
            "$ref": "#/components/schemas/Attendee_ID"
          },
          "delegate": {
            "$ref": "#/components/schemas/DelegateResponse"
          },
          "microphone": {
            "$ref": "#/components/schemas/MicrophoneResponse"
          },
          "role": {
            "$ref": "#/components/schemas/RoleResponse"
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "createdAt": {
            "$ref": "#/components/schemas/createdAt"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/updatedAt"
          },
          "__v": {
            "$ref": "#/components/schemas/DocumentVersion"
          }
        },
        "required": [
          "_id",
          "delegate",
          "microphone",
          "role",
          "session",
          "createdAt",
          "updatedAt",
          "__v"
        ],
        "x-examples": {
          "example": {
            "_id": "5f4385e18365ec18ae853f6d",
            "delegate": {
              "_id": "5d5aad5e39d02e4c4bc3fb40",
              "firstname": "John",
              "lastname": "Doe",
              "description": "string",
              "photo": {
                "_id": "5f44bbe68365ec18ae854003",
                "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                "size": 2751,
                "mimeType": "image/png",
                "encoding": "7bit",
                "createdAt": "2020-08-25T08:40:40.601Z",
                "updatedAt": "2020-08-25T08:44:42.900Z"
              },
              "division": {
                "_id": "5d5aad5e39d02e4c4bc3fb40",
                "photo": {
                  "_id": "5f44bbe68365ec18ae854003",
                  "url": "https://metadata-cdn.streamovations.be/4980f8babb6cbf39002f1d259b7a43c2",
                  "size": 2751,
                  "mimeType": "image/png",
                  "encoding": "7bit",
                  "createdAt": "2020-08-25T08:40:40.601Z",
                  "updatedAt": "2020-08-25T08:44:42.900Z"
                },
                "name": "VLD",
                "createdAt": "2020-08-25T08:40:40.601Z",
                "updatedAt": "2020-08-25T08:44:42.900Z",
                "__v": 0
              },
              "role": {
                "priority": 1,
                "name": "Burgemeester",
                "_id": "5d5aadd539d02e4c4bc3fb5c",
                "createdAt": "2020-08-25T08:40:40.601Z",
                "updatedAt": "2020-08-25T08:44:42.900Z",
                "__v": 0
              },
              "email": "user@example.com",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z",
              "refId": "JD01",
              "__v": 0
            },
            "microphone": {
              "_id": "5f44bbe78365ec18ae854004",
              "name": "Microphone 1",
              "uuid": "mic1",
              "id": 1,
              "status": true,
              "description": "string",
              "room": 1,
              "manufacturer": "televic",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z",
              "__v": 0
            },
            "role": {
              "priority": 1,
              "name": "Burgemeester",
              "_id": "5d5aadd539d02e4c4bc3fb5c",
              "createdAt": "2020-08-25T08:40:40.601Z",
              "updatedAt": "2020-08-25T08:44:42.900Z",
              "__v": 0
            },
            "session": 100,
            "createdAt": "2020-08-25T08:40:40.601Z",
            "updatedAt": "2020-08-25T08:44:42.900Z",
            "__v": 0
          }
        },
        "description": ""
      },
      "Attendee_ID": {
        "type": "string",
        "title": "Attendee_ID",
        "example": "5f4385e18365ec18ae853f6d",
        "x-examples": {
          "example": "5f4385e18365ec18ae853f6d"
        },
        "x-tags": [
          "Attendees"
        ]
      },
      "AttendeeCreateRequest": {
        "title": "AttendeeCreateRequest",
        "type": "object",
        "properties": {
          "delegate": {
            "$ref": "#/components/schemas/Delegate_ID"
          },
          "role": {
            "$ref": "#/components/schemas/Role_ID"
          },
          "microphone": {
            "$ref": "#/components/schemas/Microphone_ID"
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          }
        },
        "required": [
          "delegate",
          "role",
          "microphone",
          "session"
        ],
        "x-examples": {
          "example": {
            "delegate": "5d5aad5e39d02e4c4bc3fb40",
            "role": "5d5aadd539d02e4c4bc3fb5c",
            "microphone": "5f44bbe78365ec18ae854004",
            "session": 100
          }
        },
        "x-tags": [
          "Attendees"
        ]
      },
      "AttendeeUpdateRequest": {
        "title": "AttendeeUpdateRequest",
        "type": "object",
        "properties": {
          "delegate": {
            "$ref": "#/components/schemas/Delegate_ID"
          },
          "role": {
            "$ref": "#/components/schemas/Role_ID"
          },
          "microphone": {
            "$ref": "#/components/schemas/Microphone_ID"
          }
        },
        "x-examples": {
          "example": {
            "delegate": "5d5aad5e39d02e4c4bc3fb40",
            "role": "5d5aadd539d02e4c4bc3fb5c",
            "microphone": "5f44bbe78365ec18ae854004"
          }
        },
        "x-tags": [
          "Attendees"
        ]
      },
      "DivisionCreateRequest": {
        "title": "DivisionCreateRequest",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/DivisionName"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        },
        "required": [
          "name"
        ],
        "x-tags": [
          "Divisions"
        ]
      },
      "DivisionUpdateRequest": {
        "title": "DivisionUpdateRequest",
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/DivisionName"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        },
        "x-examples": {
          "example": {
            "name": "VLD",
            "description": "string"
          }
        },
        "x-tags": [
          "Divisions"
        ]
      },
      "ValidateParamsErrorResponse": {
        "title": "ValidateParamsErrorResponse",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "default": "Request parameters did not validate",
            "example": "Request parameters did not validate"
          }
        },
        "x-examples": {
          "example": {
            "error": "Request parameters did not validate"
          }
        },
        "description": "Query or Body parameter Validation Error"
      },
      "ValidateAuthErrorResponse": {
        "title": "ValidateAuthErrorResponse",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Token could not be verified",
            "default": "Token could not be verified"
          }
        },
        "x-examples": {
          "example": {
            "error": "Token could not be verified"
          }
        },
        "description": "Auth Validation Error"
      },
      "ValidateEndpointErrorResponse": {
        "title": "ValidateEndpointErrorResponse",
        "type": "object",
        "x-examples": {
          "example": {}
        },
        "description": "Customer Endpoint Validation Error"
      }
    }
  },
  "security": [
    {
      "JWT Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Divisions"
    },
    {
      "name": "Delegates"
    }
  ]
}